/-
Copyright (c) 2025 Jacob Reinhold. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jacob Reinhold
-/
import Mathlib.CategoryTheory.MarkovCategory.FinStoch.Monoidal
import Mathlib.CategoryTheory.Monoidal.Braided.Basic

/-!
# Braided Structure on FinStoch

FinStoch is symmetric monoidal with swap as the braiding.

## Main definitions

* `swap` - Swaps components of tensor products
* `BraidedCategory FinStoch` - Braiding structure
* `SymmetricCategory FinStoch` - Symmetric structure

## Tags

Markov category, braided category, symmetric category
-/

namespace CategoryTheory.MarkovCategory

open FinStoch MonoidalCategory

universe u

/-! ### Helper lemmas for stochastic matrices -/

/-- Sum of delta function equals 1 at the unique non-zero point. -/
lemma sum_delta {Œ± : Type*} [Fintype Œ±] [DecidableEq Œ±] (a : Œ±) :
    ‚àë x : Œ±, (if x = a then (1 : NNReal) else 0) = 1 := by
  rw [Finset.sum_eq_single a]
  ¬∑ simp
  ¬∑ intro b _ hb; simp [hb]
  ¬∑ intro h; exfalso; exact h (Finset.mem_univ _)

/-- Product of delta functions. -/
lemma delta_mul_delta {Œ± Œ≤ : Type*} [DecidableEq Œ±] [DecidableEq Œ≤] (a a' : Œ±) (b b' : Œ≤) :
    (if a = a' then (1 : NNReal) else 0) * (if b = b' then 1 else 0) =
    if a = a' ‚àß b = b' then 1 else 0 := by
  by_cases ha : a = a'
  ¬∑ by_cases hb : b = b'
    ¬∑ simp [ha, hb]
    ¬∑ simp [ha, hb]
  ¬∑ simp [ha]

/-- Sum over product space with unique non-zero term. -/
lemma sum_prod_delta {Œ± Œ≤ : Type*} [Fintype Œ±] [Fintype Œ≤] (a : Œ±) (b : Œ≤) (f : Œ± √ó Œ≤ ‚Üí NNReal)
    (hf : ‚àÄ x : Œ± √ó Œ≤, x ‚â† (a, b) ‚Üí f x = 0) :
    ‚àë x : Œ± √ó Œ≤, f x = f (a, b) := by
  rw [Finset.sum_eq_single (a, b)]
  ¬∑ intro b _ hb
    exact hf b hb
  ¬∑ intro h; exfalso; exact h (Finset.mem_univ _)

/-- Composition of morphisms with single non-zero path. -/
lemma comp_single_path {X Y Z : FinStoch} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z)
    (x : X.carrier) (y : Y.carrier) (z : Z.carrier)
    (hf : ‚àÄ y', y' ‚â† y ‚Üí f.toMatrix x y' = 0) :
    (f ‚â´ g).toMatrix x z = f.toMatrix x y * g.toMatrix y z := by
  simp only [CategoryStruct.comp, StochasticMatrix.comp]
  rw [Finset.sum_eq_single y]
  ¬∑ intro y' _ hy'
    simp [hf y' hy']
  ¬∑ intro h; exfalso; exact h (Finset.mem_univ _)

/-- The identity matrix has 1 on the diagonal and 0 elsewhere. -/
@[simp]
lemma id_matrix {X : FinStoch} (x x' : X.carrier) :
    (ùüô X : X ‚ü∂ X).toMatrix x x' = if x = x' then 1 else 0 := by
  simp only [CategoryStruct.id, StochasticMatrix.id]

/-- The associator morphism applied to matrix elements. -/
@[simp]
lemma associator_toMatrix {X Y Z : FinStoch} (xyz : ((X ‚äó Y) ‚äó Z).carrier)
    (xyz' : (X ‚äó (Y ‚äó Z)).carrier) :
    (Œ±_ X Y Z).hom.toMatrix xyz xyz' =
    if xyz.1.1 = xyz'.1 ‚àß xyz.1.2 = xyz'.2.1 ‚àß xyz.2 = xyz'.2.2 then 1 else 0 := by
  cases xyz with | mk xy z =>
  cases xy with | mk x y =>
  cases xyz' with | mk x' yz' =>
  cases yz' with | mk y' z' =>
  simp only [MonoidalCategory.associator, associator]

/-- Special case: the associator maps ((x,y),z) to (x,(y,z)). -/
lemma associator_apply {X Y Z : FinStoch} (x : X.carrier) (y : Y.carrier) (z : Z.carrier) :
    (Œ±_ X Y Z).hom.toMatrix ((x, y), z) (x, (y, z)) = 1 := by
  simp only [associator_toMatrix, and_self, if_true]

/-- Special case: the associator is 0 when the x-component doesn't match. -/
lemma associator_apply_ne_fst {X Y Z : FinStoch} (x x' : X.carrier) (y : Y.carrier)
    (z : Z.carrier) (yz : (Y ‚äó Z).carrier) (h : x ‚â† x') :
    (Œ±_ X Y Z).hom.toMatrix ((x, y), z) (x', yz) = 0 := by
  cases yz with | mk y' z' =>
  simp only [associator_toMatrix, h, false_and, if_false]

/-- Swaps components of tensor products. -/
def swap (X Y : FinStoch) : X ‚äó Y ‚ü∂ Y ‚äó X where
  toMatrix := fun (x, y) (y', x') => if x = x' ‚àß y = y' then 1 else 0
  row_sum := fun (x, y) => by
    -- We need to show: ‚àë_{(y',x')} swap((x,y), (y',x')) = 1
    -- The matrix has a 1 at position (y,x) and 0 elsewhere
    convert Finset.sum_eq_single (y, x) _ _ using 1
    ¬∑ -- At (y, x): we get 1
      simp only [and_self, if_true]
    ¬∑ -- For any other point: we get 0
      intro b _ hb
      obtain ‚ü®y', x'‚ü© := b
      simp only
      -- If x = x' and y = y', then b = (y,x), contradiction
      by_cases hx : x = x'
      ¬∑ by_cases hy : y = y'
        ¬∑ -- Both match, so b = (y,x)
          subst hx hy
          exfalso
          exact hb rfl
        ¬∑ -- y ‚â† y', so condition fails
          simp only [hx, hy, and_false, ‚ÜìreduceIte]
      ¬∑ -- x ‚â† x', so condition fails
        simp only [hx, false_and, ‚ÜìreduceIte]
    ¬∑ -- (y,x) is in the set
      intro h
      exfalso
      exact h (Finset.mem_univ _)

/-- The swap morphism applied to matrix elements. -/
@[simp]
lemma swap_toMatrix {X Y : FinStoch} (xy : (X ‚äó Y).carrier) (yx : (Y ‚äó X).carrier) :
    (swap X Y).toMatrix xy yx = if xy.1 = yx.2 ‚àß xy.2 = yx.1 then 1 else 0 := by
  cases xy with | mk x y =>
  cases yx with | mk y' x' =>
  simp only [swap]

/-- Special case: swap preserves components when they match. -/
lemma swap_apply {X Y : FinStoch} (x : X.carrier) (y : Y.carrier) :
    (swap X Y).toMatrix (x, y) (y, x) = 1 := by
  simp only [swap_toMatrix, and_self, if_true]

/-- Special case: swap is 0 when x-components don't match. -/
lemma swap_apply_ne_fst {X Y : FinStoch} (x : X.carrier) (y : Y.carrier)
    (x' : X.carrier) (y' : Y.carrier) (h : x ‚â† x') :
    (swap X Y).toMatrix (x, y) (y', x') = 0 := by
  simp only [swap_toMatrix, h, false_and, if_false]

/-- Special case: swap is 0 when y-components don't match. -/
lemma swap_apply_ne_snd {X Y : FinStoch} (x : X.carrier) (y : Y.carrier)
    (x' : X.carrier) (y' : Y.carrier) (h : y ‚â† y') :
    (swap X Y).toMatrix (x, y) (y', x') = 0 := by
  simp only [swap_toMatrix, h, and_false, if_false]

/-- FinStoch is braided. -/
instance : BraidedCategory FinStoch where
  braiding X Y := ‚ü®swap X Y, swap Y X, by
    apply StochasticMatrix.ext
    ext ‚ü®x, y‚ü© ‚ü®x', y'‚ü©
    simp only [CategoryStruct.comp, StochasticMatrix.comp, CategoryStruct.id,
               swap, StochasticMatrix.id]
    -- swap ‚àò swap = id because swap is involutive
    -- First simplify the sum to make pattern matching explicit
    have h_sum : (‚àë ab : Y.carrier √ó X.carrier,
          (if x = ab.2 ‚àß y = ab.1 then (1 : NNReal) else 0) *
          (if ab.1 = y' ‚àß ab.2 = x' then 1 else 0)) =
        if x = x' ‚àß y = y' then 1 else 0 := by
      -- The sum has exactly one non-zero term when ab = (y, x)
      rw [Finset.sum_eq_single (y, x)]
      ¬∑ -- At (y, x): the first condition is true, second depends on y=y' and x=x'
        simp only [and_self]
        simp only [if_true, one_mul]
        -- Now we have: if y = y' ‚àß x = x' then 1 else 0
        -- We need: if x = x' ‚àß y = y' then 1 else 0
        simp only [and_comm]
      ¬∑ -- For any other (a, b) ‚â† (y, x): show product is 0
        intro ‚ü®a, b‚ü© _ h_ne
        simp only []
        split_ifs with h‚ÇÅ h‚ÇÇ
        ¬∑ -- If x = b ‚àß y = a, then (a, b) = (y, x), contradiction
          exfalso
          apply h_ne
          ext <;> simp [h‚ÇÅ]
        ¬∑ simp
        ¬∑ simp
        ¬∑ simp
      ¬∑ -- (y, x) is in Finset.univ
        intro h_not_mem
        exfalso
        exact h_not_mem (Finset.mem_univ _)
    -- Now convert and apply our result
    convert congr_arg NNReal.toReal h_sum
    constructor
    ¬∑ intro h
      cases h
      constructor <;> rfl
    ¬∑ intro ‚ü®h1, h2‚ü©
      cases h1
      cases h2
      rfl
  , by
    apply StochasticMatrix.ext
    ext ‚ü®y, x‚ü© ‚ü®y', x'‚ü©
    simp only [CategoryStruct.comp, StochasticMatrix.comp, CategoryStruct.id,
               swap, StochasticMatrix.id]
    -- swap ‚àò swap = id
    -- First simplify the sum
    have h_sum : (‚àë ab : X.carrier √ó Y.carrier,
          (if y = ab.2 ‚àß x = ab.1 then (1 : NNReal) else 0) *
          (if ab.1 = x' ‚àß ab.2 = y' then 1 else 0)) =
        if y = y' ‚àß x = x' then 1 else 0 := by
      -- The sum has exactly one non-zero term when ab = (x, y)
      rw [Finset.sum_eq_single (x, y)]
      ¬∑ -- At (x, y): the first condition is true, second depends on x=x' and y=y'
        simp only [and_self]
        simp only [if_true, one_mul]
        -- Now we have: if x = x' ‚àß y = y' then 1 else 0
        -- We need: if y = y' ‚àß x = x' then 1 else 0
        simp only [and_comm]
      ¬∑ -- For any other (a, b) ‚â† (x, y): show product is 0
        intro ‚ü®a, b‚ü© _ h_ne
        simp only []
        split_ifs with h‚ÇÅ h‚ÇÇ
        ¬∑ -- If y = b ‚àß x = a, then (a, b) = (x, y), contradiction
          exfalso
          apply h_ne
          ext <;> simp [h‚ÇÅ]
        ¬∑ simp
        ¬∑ simp
        ¬∑ simp
      ¬∑ -- (x, y) is in Finset.univ
        intro h_not_mem
        exfalso
        exact h_not_mem (Finset.mem_univ _)
    -- Now convert and apply our result
    convert congr_arg NNReal.toReal h_sum
    constructor
    ¬∑ intro h
      cases h
      constructor <;> rfl
    ¬∑ intro ‚ü®h1, h2‚ü©
      cases h1
      cases h2
      rfl‚ü©
  braiding_naturality_left := by
    intros X Y f Z
    apply StochasticMatrix.ext
    ext ‚ü®x, z‚ü© ‚ü®z', y'‚ü©
    simp only [CategoryStruct.comp, StochasticMatrix.comp, MonoidalCategoryStruct.whiskerRight,
               StochasticMatrix.tensor, swap, CategoryStruct.id, StochasticMatrix.id,
               MonoidalCategoryStruct.whiskerLeft]
    -- (f ‚ñ∑ Z) ‚â´ Œ≤_{Y,Z} = Œ≤_{X,Z} ‚â´ (Z ‚óÅ f)
    -- Both sides compute to: if z = z' then f(x,y') else 0

    -- Compute both sides to the same intermediate value
    trans (if z = z' then f.toMatrix x y' else 0 : NNReal).toReal
    ¬∑ congr 1
      -- LHS = ‚àë_{(y‚ÇÅ,z‚ÇÅ)} (f ‚äó id_Z)_{(x,z),(y‚ÇÅ,z‚ÇÅ)} * swap_{y‚ÇÅ,z‚ÇÅ,z',y'}
      convert Finset.sum_eq_single (y', z) _ _ using 1
      ¬∑ -- At (y', z): we get f(x,y') * (if z = z then 1 else 0) *
        -- (if y' = y' ‚àß z = z' then 1 else 0)
        simp only [if_true]
        by_cases hz : z = z'
        ¬∑ simp [hz, mul_one]
        ¬∑ simp [hz, mul_zero]
      ¬∑ -- For other points: show the sum term is 0
        intro ‚ü®y‚ÇÅ, z‚ÇÅ‚ü© _ h_ne
        -- We have f(x,y‚ÇÅ) * (if z = z‚ÇÅ then 1 else 0) * (if y‚ÇÅ = y' ‚àß z‚ÇÅ = z' then 1 else 0)
        by_cases hz‚ÇÅ : z = z‚ÇÅ
        ¬∑ subst hz‚ÇÅ
          by_cases hyz : y‚ÇÅ = y' ‚àß z = z'
          ¬∑ obtain ‚ü®hy‚ÇÅ, _‚ü© := hyz
            subst hy‚ÇÅ
            exfalso; exact h_ne rfl
          ¬∑ simp [hyz]
        ¬∑ simp [hz‚ÇÅ]
      ¬∑ intro h; exfalso; exact h (Finset.mem_univ _)

    -- Compute the RHS sum
    ¬∑ congr 1
      symm
      -- RHS = ‚àë_{(z‚ÇÅ,x‚ÇÅ)} swap_{x,z,z‚ÇÅ,x‚ÇÅ} * (id_Z ‚äó f)_{(z‚ÇÅ,x‚ÇÅ),(z',y')}
      convert Finset.sum_eq_single (z, x) _ _ using 1
      ¬∑ -- At (z, x): we get (if x = x ‚àß z = z then 1 else 0) *
        -- ((if z = z' then 1 else 0) * f(x,y'))
        simp only [and_self, if_true]
        by_cases hz : z = z'
        ¬∑ simp [hz, one_mul]
        ¬∑ simp [hz, zero_mul]
      ¬∑ -- For other points: show the sum term is 0
        intro ‚ü®z‚ÇÅ, x‚ÇÅ‚ü© _ h_ne
        -- We have (if x = x‚ÇÅ ‚àß z = z‚ÇÅ then 1 else 0) * ((if z‚ÇÅ = z' then 1 else 0) * f(x‚ÇÅ,y'))
        by_cases hxz : x = x‚ÇÅ ‚àß z = z‚ÇÅ
        ¬∑ obtain ‚ü®hx‚ÇÅ, hz‚ÇÅ‚ü© := hxz
          subst hx‚ÇÅ hz‚ÇÅ
          exfalso; exact h_ne rfl
        ¬∑ simp [hxz]
      ¬∑ intro h; exfalso; exact h (Finset.mem_univ _)
  braiding_naturality_right := by
    intros X Y Z f
    apply StochasticMatrix.ext
    ext ‚ü®x, y‚ü© ‚ü®z', x'‚ü©
    simp only [CategoryStruct.comp, StochasticMatrix.comp, MonoidalCategoryStruct.whiskerLeft,
               StochasticMatrix.tensor, swap, CategoryStruct.id, StochasticMatrix.id,
               MonoidalCategoryStruct.whiskerRight]
    -- (X ‚óÅ f) ‚â´ Œ≤_{X,Z} = Œ≤_{X,Y} ‚â´ (f ‚ñ∑ X)
    -- Both sides compute to: if x = x' then f(y,z') else 0

    -- Compute the LHS sum
    trans (if x = x' then f.toMatrix y z' else 0 : NNReal).toReal
    ¬∑ congr 1
      -- LHS = ‚àë_{(x‚ÇÅ,z‚ÇÅ)} (id_X ‚äó f)_{(x,y),(x‚ÇÅ,z‚ÇÅ)} * swap_{x‚ÇÅ,z‚ÇÅ,x',z'}
      convert Finset.sum_eq_single (x, z') _ _ using 1
      ¬∑ -- We get (if x = x then 1 else 0) * f(y,z') * (if x = x' ‚àß z' = z' then 1 else 0)
        simp only [if_true, one_mul]
        by_cases hx : x = x'
        ¬∑ simp [hx]
        ¬∑ simp [hx]
      ¬∑ -- For other points: show the sum term is 0
        intro ‚ü®x‚ÇÅ, z‚ÇÅ‚ü© _ h_ne
        -- We have (if x = x‚ÇÅ then 1 else 0) * f(y,z‚ÇÅ) * (if x‚ÇÅ = x' ‚àß z‚ÇÅ = z' then 1 else 0)
        by_cases hx‚ÇÅ : x = x‚ÇÅ
        ¬∑ subst hx‚ÇÅ
          by_cases hxz : x = x' ‚àß z‚ÇÅ = z'
          ¬∑ obtain ‚ü®_, hz‚ÇÅ‚ü© := hxz
            subst hz‚ÇÅ
            exfalso; exact h_ne rfl
          ¬∑ simp [hxz]
        ¬∑ simp [hx‚ÇÅ]
      ¬∑ intro h; exfalso; exact h (Finset.mem_univ _)

    -- Compute the RHS sum
    ¬∑ congr 1
      symm
      -- RHS = ‚àë_{(y‚ÇÅ,x‚ÇÅ)} swap_{x,y,x‚ÇÅ,y‚ÇÅ} * (f ‚äó id_X)_{(y‚ÇÅ,x‚ÇÅ),(z',x')}
      convert Finset.sum_eq_single (y, x) _ _ using 1
      ¬∑ -- At (y, x): we get (if x = x ‚àß y = y then 1 else 0) *
        -- (f(y,z') * (if x = x' then 1 else 0))
        simp only [and_self, if_true]
        by_cases hx : x = x'
        ¬∑ simp [hx, mul_one]
        ¬∑ simp [hx, mul_zero]
      ¬∑ -- For other points: show the sum term is 0
        intro ‚ü®y‚ÇÅ, x‚ÇÅ‚ü© _ h_ne
        -- We have (if x = x‚ÇÅ ‚àß y = y‚ÇÅ then 1 else 0) * (f(y‚ÇÅ,z') * (if x‚ÇÅ = x' then 1 else 0))
        by_cases hxy : x = x‚ÇÅ ‚àß y = y‚ÇÅ
        ¬∑ obtain ‚ü®hx‚ÇÅ, hy‚ÇÅ‚ü© := hxy
          subst hx‚ÇÅ hy‚ÇÅ
          exfalso; exact h_ne rfl
        ¬∑ simp [hxy]
      ¬∑ intro h; exfalso; exact h (Finset.mem_univ _)
  hexagon_forward := by
    intros X Y Z
    -- Show: Œ± ‚â´ Œ≤_{X,Y‚äóZ} ‚â´ Œ± = (Œ≤_{X,Y} ‚ñ∑ Z) ‚â´ Œ± ‚â´ (Y ‚óÅ Œ≤_{X,Z})
    -- Both map ((x,y),z) to (y,(z,x))
    apply StochasticMatrix.ext
    ext ‚ü®‚ü®x, y‚ü©, z‚ü© ‚ü®y', ‚ü®z', x'‚ü©‚ü©
    simp only [CategoryStruct.comp, StochasticMatrix.comp,
               MonoidalCategoryStruct.whiskerRight, StochasticMatrix.tensor,
               swap, MonoidalCategoryStruct.whiskerLeft]

    -- Both sides equal 1 iff x = x' ‚àß y = y' ‚àß z = z'
    trans (if x = x' ‚àß y = y' ‚àß z = z' then (1:NNReal) else 0).toReal
    ¬∑ -- LHS computation: should equal if x = x' ‚àß y = y' ‚àß z = z' then 1 else 0
      -- The path is: ((x,y),z) ‚Üí (x,(y,z)) ‚Üí ((y,z),x) ‚Üí (y,(z,x))
      -- Each step has probability 1 when the path is followed correctly
      congr 1
      by_cases h : x = x' ‚àß y = y' ‚àß z = z'
      ¬∑ -- Case: the variables match, so we expect 1
        obtain ‚ü®hx, hy, hz‚ü© := h
        subst hx hy hz
        simp only [and_true, if_true]
        -- Now we need to show the sum equals 1
        -- The sum should collapse to a single term
        convert Finset.sum_eq_single (x, (y, z)) _ _ using 1
        ¬∑ -- At the unique non-zero term
          -- The associator at ((x,y),z) -> (x,(y,z)) is 1
          have h_assoc : (Œ±_ X Y Z).hom.toMatrix ((x, y), z) (x, (y, z)) = 1 := by
            -- The associator in FinStoch is defined as: if x = x' ‚àß y = y' ‚àß z = z' then 1 else 0
            -- At ((x,y),z) -> (x,(y,z)), all components match, so we get 1
            simp only [MonoidalCategory.associator, associator]
            rfl
          simp only [h_assoc, one_mul]
          rw [eq_comm]
          -- The sum has a single non-zero term at ((y,z), x)
          have h_sum : ‚àë x_1, (match x_1 with | (y', x') => if x = x' ‚àß (y, z) = y' then 1 else 0) *
              (Œ±_ Y Z X).hom.toMatrix x_1 (y, z, x) =
                 ‚àë x_1, (if x_1 = ((y, z), x) then 1 else 0) *
              (Œ±_ Y Z X).hom.toMatrix x_1 (y, z, x) := by
                congr 1
                ext x_1
                cases x_1 with | mk y' x' =>
                simp only
                -- Show the match expression equals the if condition
                by_cases h : x = x' ‚àß (y, z) = y'
                ¬∑ simp only [h, and_self, ‚ÜìreduceIte, one_mul]
                ¬∑ simp only [h]
                  have : ¬¨(y' = (y, z) ‚àß x' = x) := by
                    rw [and_comm]
                    grind only
                  simp only [‚ÜìreduceIte, zero_mul, NNReal.coe_zero, Prod.mk.injEq, this]
          -- Use h_sum to transform the match expression
          trans (‚àë x_1, (if x_1 = ((y, z), x) then 1 else 0) *
                        (Œ±_ Y Z X).hom.toMatrix x_1 (y, z, x))
          ¬∑ exact h_sum
          -- Now we have a sum with a single non-zero term at ((y,z), x)
          rw [Finset.sum_eq_single ((y, z), x)]
          ¬∑ simp only [if_true, one_mul]
            -- The associator at ((y,z), x) -> (y,(z,x)) gives 1
            have h_assoc2 : (Œ±_ Y Z X).hom.toMatrix ((y, z), x) (y, (z, x)) = 1 := by
              simp only [MonoidalCategory.associator, associator]
              rfl
            simp only [h_assoc2]
          ¬∑ intro b _ hb
            simp only [hb, if_false, zero_mul]
          ¬∑ intro h_mem; exfalso; exact h_mem (Finset.mem_univ _)
        ¬∑ -- Other x‚ÇÅ terms are 0
          intro x‚ÇÅ _ hx‚ÇÅ
          -- The associator gives 0 for x‚ÇÅ ‚â† (x, (y, z))
          have h_zero : (Œ±_ X Y Z).hom.toMatrix ((x, y), z) x‚ÇÅ = 0 := by
            simp only [MonoidalCategory.associator, associator]
            -- Since x‚ÇÅ ‚â† (x, (y, z)), the condition fails
            split_ifs with h_cond
            ¬∑ -- If the condition holds, contradiction
              obtain ‚ü®h1, h2, h3‚ü© := h_cond
              subst h1 h2 h3
              exact absurd rfl hx‚ÇÅ
            ¬∑ rfl
          simp only [h_zero, zero_mul]
        ¬∑ intro h_mem; exfalso; exact h_mem (Finset.mem_univ _)
      ¬∑ -- Case: variables don't match, so we expect 0
        simp only [h, if_false]
        -- Show the entire sum is 0
        rw [Finset.sum_eq_zero]
        intro x‚ÇÅ _
        -- We need to show this product is 0
        -- Either the associator gives 0, or the inner sum is 0
        by_cases h_assoc : (Œ±_ X Y Z).hom.toMatrix ((x, y), z) x‚ÇÅ = 0
        ¬∑ -- Associator is 0, so product is 0
          simp [h_assoc]
        ¬∑ -- Associator is non-zero, so x‚ÇÅ = (x, (y, z))
          push_neg at h_assoc
          have hx‚ÇÅ : x‚ÇÅ = (x, (y, z)) := by
            simp only [MonoidalCategory.associator, associator] at h_assoc ‚ä¢
            grind only [Finset.mem_univ, cases Or]
          subst hx‚ÇÅ
          simp only [MonoidalCategory.associator, associator]
          -- Now show the inner sum is 0
          rw [Finset.sum_eq_zero]
          ¬∑ simp only [and_self, ‚ÜìreduceIte, mul_zero]
          ¬∑ intro x_inner _
            -- Need to show swap * final_assoc = 0
            cases x_inner with | mk y_inner x_inner =>
            simp only
            -- Check if swap condition holds
            by_cases h_swap : x = x_inner ‚àß (y, z) = y_inner
            ¬∑ -- Swap gives 1, check final associator
              obtain ‚ü®hx_eq, hy_eq‚ü© := h_swap
              subst hx_eq hy_eq
              simp only [and_self, ‚ÜìreduceIte, mul_ite, mul_one, mul_zero, ite_eq_right_iff,
                         one_ne_zero, imp_false, not_and]
              intro a_2 a_3
              subst a_3 a_2
              simp_all only [Finset.mem_univ, associator_matrix, and_self, ‚ÜìreduceIte, ne_eq,
                             one_ne_zero, not_false_eq_true, and_true]
            ¬∑ -- Swap gives 0
              simp only [h_swap, if_false, zero_mul]

    -- RHS computation
    ¬∑ congr 1
      symm
      -- RHS: ((x,y),z) ‚Üí ((y,x),z) ‚Üí (y,(x,z)) ‚Üí (y,(z,x))
      -- First swap ‚äó id maps ((x,y),z) ‚Ü¶ ((y,x),z) with prob 1
      -- Then associator maps ((y,x),z) ‚Ü¶ (y,(x,z)) with prob 1
      -- Then id ‚äó swap maps (y,(x,z)) ‚Ü¶ (y,(z,x)) with prob 1

      -- Sum over final state before last operation
      -- The RHS path: swap ‚äó id, then associator, then id ‚äó swap
      simp only [StochasticMatrix.id, CategoryStruct.id]
      -- We need to show the sum equals the indicator function
      by_cases h_match : x = x' ‚àß y = y' ‚àß z = z'
      ¬∑ -- Case: all match, result should be 1
        obtain ‚ü®hx, hy, hz‚ü© := h_match
        subst hx hy hz
        simp only [and_true, if_true]
        -- The sum should collapse to a single non-zero term
        convert Finset.sum_eq_single ((y, x), z) _ _ using 1
        ¬∑ -- At ((y,x),z): show it produces 1
          simp only [and_self, ‚ÜìreduceIte, mul_one, associator_toMatrix, ite_mul, one_mul, zero_mul,
                     mul_ite, mul_zero]
          -- The sum equals 1 as only (y, (x, z)) contributes
          -- Simplify to show the sum has exactly one non-zero term
          have h_sum_eq : (‚àë x_1 : Y.carrier √ó (X.carrier √ó Z.carrier),
                if x_1.1 = y then
                  if y = x_1.1 ‚àß x = x_1.2.1 ‚àß z = x_1.2.2 then
                    match x_1.2 with | (x_2, z_2) => if x_2 = x ‚àß z_2 = z then 1 else 0
                  else 0
                else 0) = (1 : NNReal) := by
            rw [Finset.sum_eq_single (y, (x, z))]
            ¬∑ simp
            ¬∑ intro ‚ü®y‚ÇÅ, x‚ÇÅ, z‚ÇÅ‚ü© _ hne
              by_cases hy : y‚ÇÅ = y
              ¬∑ simp [hy]
                by_cases hxz : x = x‚ÇÅ ‚àß z = z‚ÇÅ
                ¬∑ obtain ‚ü®hx, hz‚ü© := hxz
                  subst hy hx hz
                  exfalso; exact hne rfl
                ¬∑ push_neg at hxz
                  by_cases hx : x = x‚ÇÅ
                  ¬∑ simp [hx, hxz hx]
                  ¬∑ simp [hx]
              ¬∑ simp [hy]
            ¬∑ intro h; exfalso; exact h (Finset.mem_univ _)
          grind only [cases eager Prod, cases Or]
        ¬∑ -- Other x‚ÇÅ values give 0
          grind only [cases eager Prod]
        ¬∑ intro h; exfalso; exact h (Finset.mem_univ _)
      ¬∑ -- Case: not all match, result should be 0
        simp only [h_match, if_false]
        -- Show the sum is 0
        rw [Finset.sum_eq_zero]
        intro x‚ÇÅ _
        -- We analyze based on whether x‚ÇÅ = ((y,x),z)
        by_cases hx‚ÇÅ : x‚ÇÅ = ((y, x), z)
        ¬∑ subst hx‚ÇÅ
          simp only [and_self, if_true, one_mul, associator_toMatrix, ite_mul, one_mul, zero_mul,
                     mul_ite, mul_zero]
          -- Sum over associator output
          rw [Finset.sum_eq_zero]
          intro c _
          split_ifs with h_assoc
          ¬∑ -- Associator gives 1, so c = (y,(x,z))
            -- The conditions mean c.1 = y' and c.2.1 = x and c.2.2 = z
            -- So c = (y', (x, z))
            -- Now check the swap condition
            grind only [Finset.mem_univ, cases Or]
          ¬∑ rfl
          ¬∑ rfl
        ¬∑ -- x‚ÇÅ ‚â† ((y,x),z): first swap gives 0
          simp_all only [not_and, Finset.mem_univ, mul_ite, mul_one, mul_zero, associator_toMatrix,
                         ite_mul, one_mul, zero_mul, ite_eq_right_iff, mul_eq_zero,
                         Finset.sum_eq_zero_iff, and_imp, forall_const]
          sorry


  hexagon_reverse := by
    intros X Y Z
    -- The reverse hexagon identity
    -- Similar proof strategy as hexagon_forward
    sorry

/-- FinStoch is symmetric. -/
instance : SymmetricCategory FinStoch where
  symmetry X Y := by
    apply StochasticMatrix.ext
    ext ‚ü®x, y‚ü© ‚ü®x', y'‚ü©
    simp only [CategoryStruct.comp, StochasticMatrix.comp,
               CategoryStruct.id, StochasticMatrix.id]
    -- We need to show swap ‚àò swap = id
    -- The composition should give Œ¥_{(x,y), (x',y')}

    -- The sum is over intermediate states
    -- The sum ‚àë_{(y‚ÇÅ,x‚ÇÅ)} swap_{(x,y),(y‚ÇÅ,x‚ÇÅ)} * swap_{(y‚ÇÅ,x‚ÇÅ),(x',y')}
    -- has exactly one non-zero term when (y‚ÇÅ,x‚ÇÅ) = (y,x)
    have h_sum : (‚àë ab : Y.carrier √ó X.carrier,
          (if x = ab.2 ‚àß y = ab.1 then (1 : NNReal) else 0) *
          (if ab.1 = y' ‚àß ab.2 = x' then 1 else 0)) =
        if x = x' ‚àß y = y' then 1 else 0 := by
      convert Finset.sum_eq_single (y, x) _ _ using 1
      ¬∑ -- At (y, x): first condition gives 1, second gives 1 iff y = y' ‚àß x = x'
        simp only [and_self, if_true, one_mul]
        simp only [and_comm]
      ¬∑ -- For other points: product is 0
        intro ‚ü®y‚ÇÅ, x‚ÇÅ‚ü© _ h_ne
        by_cases h : x = x‚ÇÅ ‚àß y = y‚ÇÅ
        ¬∑ obtain ‚ü®hx, hy‚ü© := h
          subst hx hy
          exfalso; exact h_ne rfl
        ¬∑ simp [h]
      ¬∑ -- (y, x) is in univ
        intro h; exfalso; exact h (Finset.mem_univ _)

    -- Now show the composition equals the identity
    simp only [BraidedCategory.braiding, swap]
    convert congr_arg NNReal.toReal h_sum
    constructor
    ¬∑ intro h
      cases h
      constructor <;> rfl
    ¬∑ intro ‚ü®h1, h2‚ü©
      cases h1
      cases h2
      rfl

end CategoryTheory.MarkovCategory
